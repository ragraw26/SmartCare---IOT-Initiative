 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientWorkArea;

import Business.Enterprise.Enterprise;
import Business.Organization.PatientOrganization;
import Business.UserAccount.UserAccount;
import Business.VitalSign.VitalSign;
import Business.VitalSign.VitalSignHistory;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Rajat
 */
public class PatientVitalSignJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private PatientOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private VitalSignHistory vitalHistory;

    /**
     * Creates new form PatientVitalSignJPanel
     */
    public PatientVitalSignJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        populateTable();
        DisplayGraph();
    }

    public void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblVitalSign.getModel();
        dtm.setRowCount(0);
        vitalHistory = userAccount.getPatient().getVitalSignHistory();
        for (VitalSign vitalSign : vitalHistory.getVitalSignHistory()) {
            if (vitalHistory.getVitalSignHistory().isEmpty()) {
                JOptionPane.showMessageDialog(null, "No Vital Sign added for this patient");
            } else {
                Object[] r = new Object[6];
                r[0] = vitalSign;
                r[1] = vitalSign.getRespRate();
                r[2] = vitalSign.getHeartRate();
                r[3] = vitalSign.getSysbloodPressure();
                r[4] = vitalSign.getWeight();
                r[5] = IsNormal(vitalSign, userAccount);
                dtm.addRow(r);
            }
        }
    }

    public void refreshTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblVitalSign.getModel();
        dtm.setRowCount(0);
        vitalHistory = userAccount.getPatient().getVitalSignHistory();
        for (VitalSign vitalSign : vitalHistory.getVitalSignHistory()) {
            if (vitalHistory.getVitalSignHistory().isEmpty()) {
                JOptionPane.showMessageDialog(null, "No Vital Sign added for this patient");
            } else {
                Object[] r = new Object[6];
                r[0] = vitalSign;
                r[1] = vitalSign.getRespRate();
                r[2] = vitalSign.getHeartRate();
                r[3] = vitalSign.getSysbloodPressure();
                r[4] = vitalSign.getWeight();
                r[5] = IsNormal(vitalSign, userAccount);
                dtm.addRow(r);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        tblVitalSign = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PatientVitalSignJPanel = new javax.swing.JPanel();
        lblResprate = new javax.swing.JLabel();
        bpLabel = new javax.swing.JLabel();
        lblSysbp = new javax.swing.JLabel();
        lblWeight = new javax.swing.JLabel();
        lblTmstp = new javax.swing.JLabel();
        lblMain1 = new javax.swing.JLabel();
        txtResprate = new javax.swing.JFormattedTextField();
        txtHeartrate = new javax.swing.JFormattedTextField();
        txtsysBP = new javax.swing.JFormattedTextField();
        txtweight = new javax.swing.JFormattedTextField();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        hintToggleButton = new javax.swing.JToggleButton();
        rrLabel = new javax.swing.JLabel();
        hrLabel = new javax.swing.JLabel();
        rangeLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        lblHeartrate = new javax.swing.JLabel();
        wtLabel = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setForeground(new java.awt.Color(255, 255, 255));

        tblVitalSign.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        tblVitalSign.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Timestamp", "Respiration Rate", "Heart Rate", "Blood Pressure", "Weight", "Normal/Abnormal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblVitalSign);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Vital Sign History");

        PatientVitalSignJPanel.setBackground(new java.awt.Color(255, 255, 255));

        lblResprate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblResprate.setText("Respiratory rate");

        lblSysbp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblSysbp.setText("Systolic Blood Pressure");

        lblWeight.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblWeight.setText("Weight in Pounds");

        lblTmstp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblTmstp.setText("Timestamp");

        lblMain1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblMain1.setText("Your Today's VitalSign :");

        txtResprate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtResprate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtResprate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtResprateKeyPressed(evt);
            }
        });

        txtHeartrate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtHeartrate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtHeartrate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHeartratetxtResprateKeyPressed(evt);
            }
        });

        txtsysBP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtsysBP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtsysBP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtsysBPtxtResprateKeyPressed(evt);
            }
        });

        txtweight.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtweight.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtweight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtweighttxtResprateKeyPressed(evt);
            }
        });

        hintToggleButton.setText("Hint");
        hintToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintToggleButtonActionPerformed(evt);
            }
        });

        rangeLabel.setText("                        ");

        jButton1.setBackground(new java.awt.Color(1, 126, 1));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Capture Vital Sign");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/neu/edu/UserInterface/back_button_black.png"))); // NOI18N
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(1, 126, 1));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Capture IoT Recorded Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        lblHeartrate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblHeartrate.setText("Heart rate");

        jButton3.setBackground(new java.awt.Color(1, 126, 1));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Track My Health");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PatientVitalSignJPanelLayout = new javax.swing.GroupLayout(PatientVitalSignJPanel);
        PatientVitalSignJPanel.setLayout(PatientVitalSignJPanelLayout);
        PatientVitalSignJPanelLayout.setHorizontalGroup(
            PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblMain1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblWeight)
                                            .addComponent(lblHeartrate))
                                        .addGap(30, 30, 30)
                                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                                .addComponent(txtsysBP, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(bpLabel))
                                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                                .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                                        .addComponent(txtHeartrate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(10, 10, 10)
                                                        .addComponent(hrLabel))
                                                    .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addComponent(jXDatePicker1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, Short.MAX_VALUE)
                                                            .addComponent(txtweight, javax.swing.GroupLayout.Alignment.LEADING))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(wtLabel))
                                                    .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                                                .addComponent(hintToggleButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(rangeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                                            .addComponent(txtResprate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(10, 10, 10)
                                                        .addComponent(rrLabel)))
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addComponent(lblTmstp)
                                    .addComponent(lblSysbp)
                                    .addComponent(lblResprate))
                                .addGap(15, 15, 15))
                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel14))
                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(163, 163, 163))
        );
        PatientVitalSignJPanelLayout.setVerticalGroup(
            PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientVitalSignJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(78, 78, 78))
                    .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMain1)
                            .addComponent(hintToggleButton)
                            .addComponent(rangeLabel))
                        .addGap(13, 13, 13)
                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblResprate)
                            .addComponent(txtResprate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rrLabel))
                        .addGap(14, 14, 14)
                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHeartrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hrLabel)
                            .addComponent(lblHeartrate))
                        .addGap(12, 12, 12)
                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtsysBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bpLabel))
                                .addGap(12, 12, 12)
                                .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblWeight)
                                    .addComponent(wtLabel))
                                .addGap(12, 12, 12)
                                .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTmstp)
                                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblSysbp))
                        .addGroup(PatientVitalSignJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PatientVitalSignJPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addContainerGap(37, Short.MAX_VALUE))))
        );

        jScrollPane1.setViewportView(PatientVitalSignJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here
        if (txtResprate.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please enter Patient Respiratory Rate", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (txtHeartrate.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please enter Patient Heart Rate", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (txtsysBP.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please enter Patient Systoliv Blodd Pressure", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (txtweight.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please enter Patient Weight", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int respRate = Integer.valueOf(txtResprate.getText());
            int heartRate = Integer.valueOf(txtHeartrate.getText());
            int sysbloodPressure = Integer.valueOf(txtsysBP.getText());
            int Weight = Integer.valueOf(txtweight.getText());

            VitalSign vitalSign = userAccount.getPatient().getVitalSignHistory().addVitalSign();
            vitalSign.setRespRate(respRate);
            vitalSign.setHeartRate(heartRate);
            vitalSign.setSysbloodPressure(sysbloodPressure);
            vitalSign.setWeight(Weight);
            vitalSign.setTimestamp(jXDatePicker1.getDate());
            JOptionPane.showMessageDialog(null, "VitalSign Created Successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
            refreshTable();
            DisplayGraph();
            reset();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtResprateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtResprateKeyPressed
        // TODO add your handling code here:
        digitLength(2, evt);
    }//GEN-LAST:event_txtResprateKeyPressed

    private void txtHeartratetxtResprateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeartratetxtResprateKeyPressed
        // TODO add your handling code here:
        digitLength(2, evt);
    }//GEN-LAST:event_txtHeartratetxtResprateKeyPressed

    private void txtsysBPtxtResprateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsysBPtxtResprateKeyPressed
        // TODO add your handling code here:
        digitLength(2, evt);
    }//GEN-LAST:event_txtsysBPtxtResprateKeyPressed

    private void txtweighttxtResprateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtweighttxtResprateKeyPressed
        // TODO add your handling code here:
        digitLength(2, evt);
    }//GEN-LAST:event_txtweighttxtResprateKeyPressed

    private void hintToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintToggleButtonActionPerformed
        // TODO add your handling code here:
        ButtonModel bm = hintToggleButton.getModel();
        if (bm.isSelected()) {
            hintToggleButton.setText("Hint ON");
            hintToggleButton.setBackground(Color.CYAN);
            rangeValues();
        } else if (!(bm.isSelected())) {
            hintToggleButton.setText("Hint OFF");
            hintToggleButton.setBackground(Color.lightGray);
            rangeLabel.setText("");
            rrLabel.setText("");
            hrLabel.setText("");
            bpLabel.setText("");
            wtLabel.setText("");
        }
    }//GEN-LAST:event_hintToggleButtonActionPerformed

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        VitalSign vs = genRandomVitalSign();

        txtResprate.setText(String.valueOf(vs.getRespRate()));
        txtHeartrate.setText(String.valueOf(vs.getHeartRate()));
        txtsysBP.setText(String.valueOf(vs.getSysbloodPressure()));
        txtweight.setText(String.valueOf(vs.getWeight()));

        if (txtResprate.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please enter Patient Respiratory Rate", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (txtHeartrate.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please enter Patient Heart Rate", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (txtsysBP.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please enter Patient Systoliv Blodd Pressure", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (txtweight.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please enter Patient Weight", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int respRate = Integer.valueOf(txtResprate.getText());
            int heartRate = Integer.valueOf(txtHeartrate.getText());
            int sysbloodPressure = Integer.valueOf(txtsysBP.getText());
            int Weight = Integer.valueOf(txtweight.getText());

            VitalSign vitalSign = userAccount.getPatient().getVitalSignHistory().addVitalSign();
            vitalSign.setRespRate(respRate);
            vitalSign.setHeartRate(heartRate);
            vitalSign.setSysbloodPressure(sysbloodPressure);
            vitalSign.setWeight(Weight);
            vitalSign.setTimestamp(new java.util.Date());
            JOptionPane.showMessageDialog(null, "VitalSign Created Successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
            refreshTable();
            DisplayGraph();
            reset();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        PatientTrackMyHealthJPanel patientTrackMyHealthJPanel = new PatientTrackMyHealthJPanel(userProcessContainer, userAccount, enterprise);
        userProcessContainer.add("PatientTrackMyHealthJPanel", patientTrackMyHealthJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed

    void reset() {
        txtResprate.setText("");
        txtHeartrate.setText("");
        txtsysBP.setText("");
        txtweight.setText("");
    }

    public void digitLength(int MAX_LEN, java.awt.event.KeyEvent evt) {
        JTextField jt = (JTextField) evt.getSource();
        if (jt.getText().length() > MAX_LEN) {
            jt.setText(jt.getText().substring(0, MAX_LEN));
        }
    }

    public String IsNormal(VitalSign vitalSign, UserAccount account) {

        String status = null;
        int patientAge = Integer.valueOf(account.getPatient().getAge());
        int heartRate = vitalSign.getHeartRate();
        int respRate = vitalSign.getRespRate();
        int weight = vitalSign.getWeight();
        int bpSys = vitalSign.getSysbloodPressure();
        int x = 0;
        if ((patientAge >= 1) && (patientAge <= 3)) {
            x = 1;
        } else if ((patientAge >= 4) && (patientAge <= 5)) {
            x = 2;
        } else if ((patientAge >= 6) && (patientAge <= 12)) {
            x = 3;
        } else if ((patientAge >= 13)) {
            x = 4;
        } else {
            status = "Abnormal";
        }
        switch (x) {

            case 1:
                if (((heartRate >= 80) && (heartRate <= 130))
                        && ((bpSys >= 80) && (bpSys <= 110)) && ((respRate >= 20)
                        && (respRate <= 30)) && ((weight >= 22) && (weight <= 31))) {
                    status = "Normal";
                    break;
                }

            case 2:
                if (((heartRate >= 80) && (heartRate <= 120))
                        && ((bpSys >= 80) && (bpSys <= 110)) && ((respRate >= 20)
                        && (respRate <= 31)) && ((weight >= 31) && (weight <= 40))) {
                    status = "Normal";
                    break;
                }

            case 3:
                if (((heartRate >= 70) && (heartRate <= 110))
                        && ((bpSys >= 80) && (bpSys <= 120)) && ((respRate >= 20)
                        && (respRate <= 30)) && ((weight >= 41) && (weight <= 92))) {
                    status = "Normal";
                    break;
                }

            case 4:
                if (((heartRate >= 55) && (heartRate <= 105))
                        && ((bpSys >= 110) && (bpSys <= 120)) && ((respRate >= 12)
                        && (respRate <= 20)) && ((weight >= 110))) {
                    status = "Normal";
                    break;
                }

            default:
                status = "Abnormal";
        }
        return status;
    }

    public void DisplayGraph() {
        int count = 1;
        DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
        vitalHistory = userAccount.getPatient().getVitalSignHistory();
        for (VitalSign vitalSign : vitalHistory.getVitalSignHistory()) {
            String str = String.valueOf(count);
            dataSet.addValue(vitalSign.getRespRate(), "Respiration Rate", str);
            dataSet.addValue(vitalSign.getHeartRate(), "Heart Rate", str);
            dataSet.addValue(vitalSign.getSysbloodPressure(), "Blood Pressure", str);
            dataSet.addValue(vitalSign.getWeight(), "Weight", str);
            count++;
        }
        JFreeChart chartFactory = ChartFactory.createAreaChart("VITAL SIGN REPRESENTATION", "Timestamp", "VitalSign", dataSet, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot plot = chartFactory.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.ORANGE);
        plot.setBackgroundPaint(Color.white);
        ChartPanel chartPanel = new ChartPanel(chartFactory);
        jPanel1.removeAll();
        jPanel1.add(chartPanel, BorderLayout.CENTER);
        jPanel1.validate();
    }

    public void rangeValues() {

        int a = userAccount.getPatient().getAge();
        rangeLabel.setText(String.valueOf(a));
        if (a >= 1 && a <= 3) {
            rangeLabel.setText("Toddler's Range");
            rrLabel.setText("20-30");
            hrLabel.setText("80-130");
            bpLabel.setText("80-110");
            wtLabel.setText("22-31");
        } else if (a >= 4 && a <= 5) {
            rangeLabel.setText("PreSchooler's Range");
            rrLabel.setText("20-30");
            hrLabel.setText("80-120");
            bpLabel.setText("80-110");
            wtLabel.setText("31-40");
        } else if (a >= 6 && a <= 12) {
            rangeLabel.setText("School Age Range");
            rrLabel.setText("20-30");
            hrLabel.setText("70-110");
            bpLabel.setText("80-120");
            wtLabel.setText("41-92");
        } else if (a >= 13 && a <= 100) {
            rangeLabel.setText("Adolescent's Range");
            rrLabel.setText("12-20");
            hrLabel.setText("55-105");
            bpLabel.setText("110-120");
            wtLabel.setText(">110");
        } else {
            rangeLabel.setText("*Some Error*");
            rrLabel.setText("");
            hrLabel.setText("");
            bpLabel.setText("");
            wtLabel.setText("");
        }
    }

    VitalSign[] genRandomVitalSigns() {
        VitalSign[] vitalSigns = new VitalSign[10];
        for (int i = 0; i < vitalSigns.length; i++) {
            VitalSign vs = genRandomVitalSign();
            vitalSigns[i] = vs;
        }
        return vitalSigns;
    }

    VitalSign genRandomVitalSign() {
        VitalSign vs = new VitalSign();
        int a = userAccount.getPatient().getAge();
        if (a >= 0 && a <= 3) {
            vs.setRespRate(getRandom(15, 35, 0, 0));
            vs.setHeartRate(getRandom(70, 140, 0, 0));
            vs.setSysbloodPressure(getRandom(70, 120, 0, 0));
            vs.setWeight(getRandom(20, 35, 0, 0));
            return vs;
        } else if (a >= 4 && a <= 5) {
            vs.setRespRate(getRandom(15, 35, 0, 0));
            vs.setHeartRate(getRandom(70, 140, 0, 0));
            vs.setSysbloodPressure(getRandom(70, 120, 0, 0));
            vs.setWeight(getRandom(25, 55, 0, 0));
            return vs;
        } else if (a >= 6 && a <= 12) {
            vs.setRespRate(getRandom(15, 35, 0, 0));
            vs.setHeartRate(getRandom(70, 140, 0, 0));
            vs.setSysbloodPressure(getRandom(70, 120, 0, 0));
            vs.setWeight(getRandom(30, 100, 0, 0));
            return vs;
        } else if (a >= 13 && a <= 100) {
            vs.setRespRate(getRandom(5, 35, 0, 0));
            vs.setHeartRate(getRandom(50, 110, 0, 0));
            vs.setSysbloodPressure(getRandom(90, 140, 0, 0));
            vs.setWeight(getRandom(110, 175, 0, 0));
            return vs;
        }
        return vs;
    }

    public int getRandom(int beginRng, int endRng, int overflowLimitPct, int overflowChancePct) {
        return beginRng + (int) ((endRng - beginRng) * Math.random());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PatientVitalSignJPanel;
    private javax.swing.JLabel bpLabel;
    private javax.swing.JToggleButton hintToggleButton;
    private javax.swing.JLabel hrLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JLabel lblHeartrate;
    private javax.swing.JLabel lblMain1;
    private javax.swing.JLabel lblResprate;
    private javax.swing.JLabel lblSysbp;
    private javax.swing.JLabel lblTmstp;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JLabel rangeLabel;
    private javax.swing.JLabel rrLabel;
    private javax.swing.JTable tblVitalSign;
    private javax.swing.JFormattedTextField txtHeartrate;
    private javax.swing.JFormattedTextField txtResprate;
    private javax.swing.JFormattedTextField txtsysBP;
    private javax.swing.JFormattedTextField txtweight;
    private javax.swing.JLabel wtLabel;
    // End of variables declaration//GEN-END:variables
}
